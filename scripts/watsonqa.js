// Description
//  watson
//
// Commands:
//  watson - returns answer of question

var url = require('url');
var https = require('https');
var redis = require('redis');
var shortid= require('shortid');

(function() {
  module.exports = function(robot) {
    var bmconf = require('./bmconf');
    var redisconf = require('./redisconf');

    return robot.respond(/.*/, function(msg) {
      var question = msg.message.text;

      var query = url.parse(bmconf.url + '/v1/question/travel');
      var options = {
        host: query.hostname,
        port: query.port,
        path: query.pathname,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-synctimeout': '30',
          'Authorization': bmconf.auth
        }
      };

      var watson_req = https.request(options, function(result) {
        result.setEncoding('utf-8');
        var response_string = '';
        result.on('data', function(chunk) {
          response_string += chunk;
        });
        result.on('end', function() {
          var id = shortid.generate();

          redis_client = redis.createClient(redisconf.port, redisconf.host);
          if (redisconf.password) {
            redis_client.auth(redisconf.password);
          }
          redis_client.on("error", function(err) {
            console.log("Cannot save query log (" + id + "): " + err);
          });
          redis_client.set(id, response_string);
          redis_client.quit();

          var uri_server = "http://localhost:3000";
          var uri_dir = "/d";
          if (process.env.TRAVELQABOT_URI_SERVER) {
            uri_server = process.env.TRAVELQABOT_URI_SERVER;
          }
          if (process.env.TRAVELQABOT_URI_DIR) {
            uri_dir = process.env.TRAVELQABOT_URI_DIR;
          }
          link = uri_server + uri_dir + '/' + id;

          var watson_answer = JSON.parse(response_string)[0];
          if (watson_answer) {
            var q = watson_answer.question;
            if (q) {
              if (q.evidencelist && q.evidencelist.length > 0) {
                msg.send(q.evidencelist[0].text.substring(0, 90) + ' ' + link);
              } else if (q.errorNotifications &&
                q.errorNotifications.length > 0) {
                msg.send('Error: ' + q.errornotifications[0].text);
              } else {
                msg.send('Error: No evidences or errors in json generated by Watson');
              }
            } else {
              msg.send('Error: No contents in json generated by Watson');
            }
          }
        });
      });

      watson_req.on('error', function(err) {
        msg.send("Ooops, " + err);
      });

      var questionData = {
        'question': {
          'evidenceRequest': {
            'items': 1
          },
          'questionText': question
        }
      };

      watson_req.write(JSON.stringify(questionData));
      watson_req.end();
    });
  };
}).call(this);
